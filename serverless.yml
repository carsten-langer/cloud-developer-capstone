service: serverless-recipe-app

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function

provider:
  name: aws
  runtime: nodejs12.x
  profile: serverless
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'eu-central-1'}
  lambdaHashingVersion: 20201221
  apiGateway:
    shouldStartNameWithService: true
  tracing:
    lambda: true
    apiGateway: true

custom:
  recipeItemsTable: recipeItemsTable-${self:provider.stage}
  attachmentsS3Bucket: recipe-attachments-bucket-${self:provider.stage}
  attachmentsS3UrlExpirationSeconds: 300

functions:

  Auth0Authorizer:
    handler: src/lambda/auth/auth0Authorizer.handler

  GetRecipeItems:
    handler: src/lambda/http/getRecipeItems.handler
    events:
      - http:
          method: get
          path: recipes
          cors: true
          authorizer: Auth0Authorizer
    environment:
      RECIPE_ITEMS_TABLE: ${self:custom.recipeItemsTable}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.recipeItemsTable}
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
        Resource: "*"

  CreateRecipeItem:
    handler: src/lambda/http/createRecipeItem.handler
    events:
      - http:
          method: post
          path: recipes
          cors: true
          authorizer: Auth0Authorizer
          request:
            schema:
              application/json: ${file(schemas/create-update-recipe-item-request.json)}
    environment:
      RECIPE_ITEMS_TABLE: ${self:custom.recipeItemsTable}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.recipeItemsTable}
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
        Resource: "*"

  UpdateRecipeItem:
    handler: src/lambda/http/updateRecipeItem.handler
    events:
      - http:
          method: patch
          path: recipes/{recipeId}
          cors: true
          authorizer: Auth0Authorizer
          request:
            schema:
              application/json: ${file(schemas/create-update-recipe-item-request.json)}
    environment:
      RECIPE_ITEMS_TABLE: ${self:custom.recipeItemsTable}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.recipeItemsTable}
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
        Resource: "*"

  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: recipes/{recipeId}/attachment
          cors: true
          authorizer: Auth0Authorizer
    environment:
      ATTACHMENTS_S3_BUCKET: ${self:custom.attachmentsS3Bucket}
      ATTACHMENTS_S3_SIGNED_URL_EXPIRATION: ${self:custom.attachmentsS3UrlExpirationSeconds}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - s3:PutObject
        Resource: arn:aws:s3:::${self:custom.attachmentsS3Bucket}/*
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
        Resource: "*"

  AddUploadedUrl:
    handler: src/lambda/http/addUploadedAttachment.handler
    events:
      - s3:
          bucket: ${self:custom.attachmentsS3Bucket}
          existing: true
    environment:
      RECIPE_ITEMS_TABLE: ${self:custom.recipeItemsTable}
      ATTACHMENTS_S3_BUCKET: ${self:custom.attachmentsS3Bucket}
      ATTACHMENTS_S3_SIGNED_URL_EXPIRATION: ${self:custom.attachmentsS3UrlExpirationSeconds}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.recipeItemsTable}
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
        Resource: "*"

  DeleteAttachment:
    handler: src/lambda/http/deleteAttachment.handler
    events:
      - http:
          method: delete
          path: recipes/{recipeId}
          cors: true
          authorizer: Auth0Authorizer
    environment:
      ATTACHMENTS_S3_BUCKET: ${self:custom.attachmentsS3Bucket}
      RECIPE_ITEMS_TABLE: ${self:custom.recipeItemsTable}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - s3:DeleteObject
        Resource: arn:aws:s3:::${self:custom.attachmentsS3Bucket}/*
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.recipeItemsTable}
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
        Resource: "*"

resources:
  Resources:
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi  # refers to the resource created by cloudformation stack if there is a function which uses the api gateway.

    RecipeItemsDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: recipeId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: recipeId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        StreamSpecification:
          StreamViewType: NEW_IMAGE
        TableName: ${self:custom.recipeItemsTable}

    AttachmentsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.attachmentsS3Bucket}
        CorsConfiguration:
          CorsRules:
            - AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - HEAD
              MaxAge: 3000

    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: AttachmentsS3BucketPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: 'arn:aws:s3:::${self:custom.attachmentsS3Bucket}/*'
        Bucket: !Ref AttachmentsBucket
